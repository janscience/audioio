{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AudioIO Platform independent interfacing of numpy arrays of floats with audio files and devices. Documentation | API Reference The AudioIO modules try to use whatever audio modules installed on your system to achieve their tasks. The AudioIO package does not provide own code for decoding files and accessing audio hardware. Feaures Audio data are always numpy arrays of floats with values ranging between -1 and 1 ... ... independent of how the data are stored in an audio file. Platform independent interface for loading and writing audio files. Simple load_audio() function for loading a whole audio file. Support for blockwise random-access loading of large audio files ( class AudioLoader ). Simple write_audio() function for writing data to an audio file. Platform independent playback of numpy arrays ( play() ). Support of synchronous (blocking) and asynchronous (non blocking) playback. Automatic resampling of data for playback to match supported sampling rates. Detailed and platform specific installation instructions for audio packages. Installation Simply run (as superuser): pip install audioio Then you can use already installed audio packages for reading and writing audio files and for playing audio data. However, the support provided by the python standard library is limited to very basic wave files and playback support is very limited. If you need support for other audio file formats or for better sound output, you need to install additional packages. See installation for further instructions on additional audio packages. Usage See API Reference for detailed information. import audioio as aio Loading audio data Load an audio file into a numpy array: data, samplingrate = aio.load_audio('audio/file.wav') The read in data are always numpy arrays of floats ranging between -1 and 1. The arrays are always 2-D arrays with first axis time and second axis channel, even for single channel data. Plot the first channel: import numpy as np import matplotlib.pyplot as plt time = np.arange(len(data))/samplingrate plt.plot(time, data[:,0]) plt.show() You can also randomly access chunks of data of an audio file, without loading the entire file into memory. This is really handy for analysing very long sound recordings: # open audio file with a buffer holding 60 seconds of data: with aio.open_audio_loader('audio/file.wav', 60.0) as data: block = 1000 rate = data.samplerate for i in range(len(data)//block): x = data[i*block:(i+1)*block] # ... do something with x and rate See API documentation of the audioloader module for details. Writing audio data Write a 1-D or 2-D numpy array into an audio file (data values between -1 and 1): aio.write_audio('audio/file.wav', data, samplerate) Again, in 2-D arrays the first axis (rows) is time and the second axis the channel (columns). See API documentation of the audiowriter module for details. Converting audio files AudioIO provides a simple command line script to convert audio files: > audioconverter -e float -o test.wav test.mp3 See API documentation of the audioconverter module for details. Playing sounds Fade in and out and play a 1-D or 2-D numpy array as a sound (first axis is time and second axis the channel): aio.fade(data, samplingrate, 0.2) aio.play(data, samplingrate) Just beep aio.beep() Beep for half a second and 440 Hz: aio.beep(0.5, 440.0) aio.beep(0.5, 'a4') Musical notes are translated into frequency with the note2freq() function. See API documentation of the playaudio module for details. Managing audio modules Simply run in your terminal > audiomodules to see which audio modules you have already installed on your system, which ones are recommended to install, and how to install them. See API documentation of the audiomodules module for details. Alternatives All the audio modules AudioIO is using. For file I/O: wave : simple wave file interface of the python standard library. ewave : extended wave files. scipy.io.wavfile : simple scipy wave file interface. SoundFile : support of many open source audio file formats via libsndfile . wavefile : support of many open source audio file formats via libsndfile . audioread : MP3 file support. scikits.audiolab : seems to be no longer active. For playing sounds: sounddevice : wrapper for portaudio . PyAudio : wrapper for portaudio . simpleaudio : uses ALSA on Linux, runs well on windows. ossaudiodev : playback via the outdated OSS interface of the python standard library. winsound : native windows audio playback of the python standard library, asynchronous playback only with wave files.","title":"Home"},{"location":"#audioio","text":"Platform independent interfacing of numpy arrays of floats with audio files and devices. Documentation | API Reference The AudioIO modules try to use whatever audio modules installed on your system to achieve their tasks. The AudioIO package does not provide own code for decoding files and accessing audio hardware.","title":"AudioIO"},{"location":"#feaures","text":"Audio data are always numpy arrays of floats with values ranging between -1 and 1 ... ... independent of how the data are stored in an audio file. Platform independent interface for loading and writing audio files. Simple load_audio() function for loading a whole audio file. Support for blockwise random-access loading of large audio files ( class AudioLoader ). Simple write_audio() function for writing data to an audio file. Platform independent playback of numpy arrays ( play() ). Support of synchronous (blocking) and asynchronous (non blocking) playback. Automatic resampling of data for playback to match supported sampling rates. Detailed and platform specific installation instructions for audio packages.","title":"Feaures"},{"location":"#installation","text":"Simply run (as superuser): pip install audioio Then you can use already installed audio packages for reading and writing audio files and for playing audio data. However, the support provided by the python standard library is limited to very basic wave files and playback support is very limited. If you need support for other audio file formats or for better sound output, you need to install additional packages. See installation for further instructions on additional audio packages.","title":"Installation"},{"location":"#usage","text":"See API Reference for detailed information. import audioio as aio","title":"Usage"},{"location":"#loading-audio-data","text":"Load an audio file into a numpy array: data, samplingrate = aio.load_audio('audio/file.wav') The read in data are always numpy arrays of floats ranging between -1 and 1. The arrays are always 2-D arrays with first axis time and second axis channel, even for single channel data. Plot the first channel: import numpy as np import matplotlib.pyplot as plt time = np.arange(len(data))/samplingrate plt.plot(time, data[:,0]) plt.show() You can also randomly access chunks of data of an audio file, without loading the entire file into memory. This is really handy for analysing very long sound recordings: # open audio file with a buffer holding 60 seconds of data: with aio.open_audio_loader('audio/file.wav', 60.0) as data: block = 1000 rate = data.samplerate for i in range(len(data)//block): x = data[i*block:(i+1)*block] # ... do something with x and rate See API documentation of the audioloader module for details.","title":"Loading audio data"},{"location":"#writing-audio-data","text":"Write a 1-D or 2-D numpy array into an audio file (data values between -1 and 1): aio.write_audio('audio/file.wav', data, samplerate) Again, in 2-D arrays the first axis (rows) is time and the second axis the channel (columns). See API documentation of the audiowriter module for details.","title":"Writing audio data"},{"location":"#converting-audio-files","text":"AudioIO provides a simple command line script to convert audio files: > audioconverter -e float -o test.wav test.mp3 See API documentation of the audioconverter module for details.","title":"Converting audio files"},{"location":"#playing-sounds","text":"Fade in and out and play a 1-D or 2-D numpy array as a sound (first axis is time and second axis the channel): aio.fade(data, samplingrate, 0.2) aio.play(data, samplingrate) Just beep aio.beep() Beep for half a second and 440 Hz: aio.beep(0.5, 440.0) aio.beep(0.5, 'a4') Musical notes are translated into frequency with the note2freq() function. See API documentation of the playaudio module for details.","title":"Playing sounds"},{"location":"#managing-audio-modules","text":"Simply run in your terminal > audiomodules to see which audio modules you have already installed on your system, which ones are recommended to install, and how to install them. See API documentation of the audiomodules module for details.","title":"Managing audio modules"},{"location":"#alternatives","text":"All the audio modules AudioIO is using. For file I/O: wave : simple wave file interface of the python standard library. ewave : extended wave files. scipy.io.wavfile : simple scipy wave file interface. SoundFile : support of many open source audio file formats via libsndfile . wavefile : support of many open source audio file formats via libsndfile . audioread : MP3 file support. scikits.audiolab : seems to be no longer active. For playing sounds: sounddevice : wrapper for portaudio . PyAudio : wrapper for portaudio . simpleaudio : uses ALSA on Linux, runs well on windows. ossaudiodev : playback via the outdated OSS interface of the python standard library. winsound : native windows audio playback of the python standard library, asynchronous playback only with wave files.","title":"Alternatives"},{"location":"installation/","text":"Installation AudioIO uses whatever audio module is installed on your system. However, the python standard library support for reading and writing audio files and for playing sound is rather poor. You certainly want to install additional packages for better performance. Run in your terminal > audiomodules to see which audio modules you have already installed on your system, which ones are recommended to install, and how to install them. By calling the script with the name of an audio module as an argument you get platform specific installation instructions for this module. E.g. > audiomodules audioread Linux For file I/O you might want to install the sndfile library for accessing a wide range of audio file formats. On debian based systems: sudo apt-get install libsndfile1 libsndfile1-dev libffi-dev on rpm based systems: dnf install libsndfile libsndfile-devel libffi-devel Then you can install one of the many python wrappers for the sndfile library, e.g. SoundFile or wavefile : sudo pip install SoundFile sudo pip install wavefile MP3 and similar formats are supported by the audioread module. Install ffmpeg and friends with sudo apt-get install libav-tools python3-audioread on debian based systems and with dnf install ffmpeg ffmpeg-devel python3-audioread on rpm based systems. For playing sounds, the portaudio library is the gold standard. Install this library with sudo apt-get install libportaudio2 portaudio19-dev on debian based systems or with dnf install libportaudio portaudio-devel on rpm based systems. Then you need to install the python packages sounddevice or PyAudio : sudo pip install sounddevice sudo pip install PyAudio Windows For file I/O based on the the sndfile library install the SoundFile module: pip install SoundFile For playing sounds install simpleaudio : pip install simpleaudio","title":"Installation"},{"location":"installation/#installation","text":"AudioIO uses whatever audio module is installed on your system. However, the python standard library support for reading and writing audio files and for playing sound is rather poor. You certainly want to install additional packages for better performance. Run in your terminal > audiomodules to see which audio modules you have already installed on your system, which ones are recommended to install, and how to install them. By calling the script with the name of an audio module as an argument you get platform specific installation instructions for this module. E.g. > audiomodules audioread","title":"Installation"},{"location":"installation/#linux","text":"For file I/O you might want to install the sndfile library for accessing a wide range of audio file formats. On debian based systems: sudo apt-get install libsndfile1 libsndfile1-dev libffi-dev on rpm based systems: dnf install libsndfile libsndfile-devel libffi-devel Then you can install one of the many python wrappers for the sndfile library, e.g. SoundFile or wavefile : sudo pip install SoundFile sudo pip install wavefile MP3 and similar formats are supported by the audioread module. Install ffmpeg and friends with sudo apt-get install libav-tools python3-audioread on debian based systems and with dnf install ffmpeg ffmpeg-devel python3-audioread on rpm based systems. For playing sounds, the portaudio library is the gold standard. Install this library with sudo apt-get install libportaudio2 portaudio19-dev on debian based systems or with dnf install libportaudio portaudio-devel on rpm based systems. Then you need to install the python packages sounddevice or PyAudio : sudo pip install sounddevice sudo pip install PyAudio","title":"Linux"},{"location":"installation/#windows","text":"For file I/O based on the the sndfile library install the SoundFile module: pip install SoundFile For playing sounds install simpleaudio : pip install simpleaudio","title":"Windows"}]}